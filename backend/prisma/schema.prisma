// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  Male
  Female
  NonBinary
}

enum Religion {
  Hinduism
  Buddhism
  Islam
  Christianity
  Others
  NoPreference
}

enum MaritalStatus {
  Single
  Widowed
  Divorced
  NoPreference
}

enum DietPreference {
  Veg
  NonVeg
  Eggiterian
  Vegan
  NoPreference
}

enum EducationLevel {
  PrimaryLevel
  SecondaryLevel
  HigherSecondaryLevel
  Bachelor
  Masters
  PhD
  Diploma
  NoPreference
}

enum EmploymentStatus {
  Employed
  SelfEmployed
  Student
  Unemployed
  Retired
  NoPreference
}

enum FamilyType {
  Joint
  Nuclear
  Extended
}

enum ResidentialStatus {
  NepaliCitizen
  PRHolder
  NRN
  NoPreference
}

enum FamilyClass {
  MiddleClass
  UpperClass
  LowerClass
  NoPreference
}

enum Ethnicity {
  Brahmin
  Chhetri
  Newar
  Gurung
  Magar
  Rai
  Limbu
  Tamang
  Sherpa
  Thakuri
  Dalit
  Madhesi
  Janajati
  Others
  NoPreference
}

enum FamilyValue {
  Traditional
  Modern
  Liberal
  NoPreference
}

enum MotherTongue {
  Nepali
  Newari
  Maithili
  Bhojpuri
  Tharu
  Tamang
  Sherpa
  Gurung
  Magar
  Rai
  Limbu
  Others
}

enum Interests {
  Animals
  Travel
  Food
  Sports
  Art
  Movie
  Music
  Dancing
  Singing
  Comedy
  Beauty
  Science
  Reading
  Technology
  Cooking
  Fitness
  Shopping
  Writing
  Business
  Others
}

enum IncomeRange {
  very_low
  low
  medium
  high
  very_high
  unemployed
}

// Models

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model User {
  id               Int       @id @default(autoincrement())
  fullname         String
  email            String    @unique
  dob              String
  password         String
  gender           Gender
  googleId         String?   @unique
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  messagesSent     Message[] @relation("SenderMessages")
  messagesReceived Message[] @relation("ReceiverMessages")
  matches          Match[]   @relation("user1")
  matchesBy        Match[]   @relation("user2")

  likes Like[] @relation("likedUsers")

  reportsSubmitted Report[] @relation("SubmittedReports") // Reports submitted by this user
  reportsReceived  Report[] @relation("ReceivedReports") // Reports received by this user

  FamilyDetails FamilyDetails[]

  UploadPhoto UploadPhoto[]

  PartnerPreference PartnerPreference[]

  DemographicDetails DemographicDetails[]

  Interest Interest[]

  Notification Notification[]

  likedBy Like[] @relation("likedBy")

  blockedByUsers Block[] @relation("Blocked")
}

model DemographicDetails {
  id                Int               @id @default(autoincrement())
  userId            Int
  user              User              @relation(fields: [userId], references: [id])
  maritalStatus     MaritalStatus
  residentialStatus ResidentialStatus
  districtId        Int
  provinceId        Int
  educationLevel    EducationLevel
  employmentStatus  EmploymentStatus
  dietPreference    DietPreference
  height            String
  incomeRange       String
  motherTongue      MotherTongue
  province          Province          @relation(fields: [provinceId], references: [id])
  district          District          @relation(fields: [districtId], references: [id])
}

model Message {
  id             Int       @id @default(autoincrement())
  senderId       Int
  sender         User      @relation("SenderMessages", fields: [senderId], references: [id])
  receiverId     Int
  receiver       User      @relation("ReceiverMessages", fields: [receiverId], references: [id])
  messageContent String
  sentAt         DateTime
  readAt         DateTime?
}

model Match {
  id      Int  @id @default(autoincrement())
  user1Id Int
  user2Id Int
  user1   User @relation("user1", fields: [user1Id], references: [id])
  user2   User @relation("user2", fields: [user2Id], references: [id])
}

model Interest {
  id       Int       @id @default(autoincrement())
  userId   Int
  interest Interests
  user     User      @relation(fields: [userId], references: [id])
}

model Province {
  id                 Int                  @id @default(autoincrement())
  provinceName       String
  districts          District[]
  demographicDetails DemographicDetails[]
}

model District {
  id                 Int                  @id @default(autoincrement())
  provinceId         Int
  province           Province             @relation(fields: [provinceId], references: [id])
  name               String
  demographicDetails DemographicDetails[]
}

model FamilyDetails {
  id           Int         @id @default(autoincrement())
  userId       Int
  user         User        @relation(fields: [userId], references: [id])
  ethnicity    Ethnicity
  familyValues FamilyValue
  familyClass  FamilyClass
  religion     Religion
  gotra        String
}

model Like {
  id      Int  @id @default(autoincrement())
  userId  Int
  likedId Int
  user    User @relation("likedBy", fields: [userId], references: [id])
  liked   User @relation("likedUsers", fields: [likedId], references: [id])
}

model Report {
  id             Int      @id @default(autoincrement())
  userId         Int // ID of the user who is submitting the report
  user           User     @relation("SubmittedReports", fields: [userId], references: [id])
  reportedUserId Int // ID of the user being reported
  reportedUser   User     @relation("ReceivedReports", fields: [reportedUserId], references: [id])
  reportContent  String
  reportDate     DateTime @default(now())
}

model UploadPhoto {
  id        Int    @id @default(autoincrement())
  image_url String
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
}

model PartnerPreference {
  id                Int               @id @default(autoincrement())
  userId            Int
  user              User              @relation(fields: [userId], references: [id])
  maritalStatus     MaritalStatus
  ageRange          Int
  dietPreference    DietPreference
  religion          Religion
  familyValues      FamilyValue
  ethnicity         Ethnicity
  familyClass       FamilyClass
  residentialStatus ResidentialStatus
  employmentStatus  EmploymentStatus
  educationLevel    EducationLevel
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Block {
  id        Int      @id @default(autoincrement())
  blockedId Int
  createdAt DateTime @default(now())
  blocked   User     @relation("Blocked", fields: [blockedId], references: [id], onDelete: Cascade)
}
